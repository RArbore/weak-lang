program := declaration* EOF

declaration := funDeclaration
|opDeclaration
|varDeclaration
|statement

funDeclaration := "f" IDENTIFIER "(" parameters? ")" block
opDeclaration := "o" IDENTIFIER "(" IDENTIFIER, IDENTIFIER ")" block
varDeclaration := "a" IDENTIFIER ( "=" expression )? ";"
parameters := IDENTIFIER ( "," IDENTIFIER )*
arguments := expression ( "," expression )*

statement := exprStatement
           | ifStatement
           | printStatement
           | returnStatement
           | whileStatement
           | block

block := "{" declaration* "}";

exprStatement := expression ";"
ifStatement := "i" "(" expression ")" block
printStatement := "p" expression ";"
returnStatement := "r" expression? ";"
whileStatement := "w" "(" expression ")" block

expression := assignment
assignment := IDENTIFIER "=" assignment | logicOr
logicOr = logicAnd ( "O" logicAnd )*
logicAnd = equality ( "A" equality )*
equality := comparison( ("!=" | "==") comparison*
comparison := term ( ( ">" | "<") term *
term := factor ( ( "-" | "+" ) factor )*
factor := unary ( ( "/" | "*" | "sa" ) unary )*

unary := ( "!" | "-" | "s" ) unary | primary
primary := "T" | "F" | "N" | NUMBER | STRING | IDENTIFIER | "(" expression ")" | "[]" | "[" NUMBER ( "," NUMBER )* "]"

NUMBER := DIGIT+ ( "." DIGIT+ )?
STRING := "\"" <any not "\"">* "\""
IDENTIFIER := ALPHA ( ALPHA | DIGIT )*
ALPHA := "a" ... "z" | "A" ... "Z" | "_"
DIGIT := "0" ... "9"
